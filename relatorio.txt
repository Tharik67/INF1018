Relatorio trabalho 30-11-2020

Turma 3WA
Grupo: 
        Tharik Augusto Lourenco - 1720688
        Ana Clara - 1910414
        
Funções:
	libera_func 	- funcionando

	cria_func 
		INT_PAR
			PARAM 	- funcionando
			FIX		- funcionando
			IND		- funcionando
		
		PTR_PAR
			PARAM	- funcionando
			FIX		- funcionando
			IND		- funcionando

Testes:

	Teste de tipos inteiros:

	com a função:
		int mult(int x, int y) {
			return x * y;
		}

	podemos fazer o teste de PARAM e FIX:

		params[0].tipo_val = INT_PAR; 
		params[0].orig_val = PARAM;   

		params[1].tipo_val = INT_PAR; 
		params[1].orig_val = FIX;     
		params[1].valor.v_int = 10;

		f_mult = (func_ptr) cria_func (mult, params, 2);
		printf("%d\n", f_mult(i));

	tambem usamos a mesma função para testar o tipo IND

		params1[0].tipo_val = INT_PAR; 
		params1[0].orig_val = IND;     
		params1[0].valor.v_ptr = &i;

		params1[1].tipo_val = INT_PAR; 
		params1[1].orig_val = FIX;
		params1[1].valor.v_int = 10;

		f_mult = (func_ptr) cria_func (mult, params1, 2);

		for (i = 1; i <=10; i++) {
		printf("%d\n", f_mult()); 
		}

	Teste de tipo ponteiro;

	com a função:
		float somaValorPtrFloat(float * x, float * y){
		return *x + *y;
		}

	podemos fazer o teste de PARAM e FIX:
		float f1 = 5;
		float f2 = 60;
		
		DescParam params2[2];
		params2[1].tipo_val = PTR_PAR; 
		params2[1].orig_val = FIX;
		params2[1].valor.v_ptr = &f1;

		params2[0].tipo_val = PTR_PAR; 
		params2[0].orig_val = PARAM;


		func_com_ptrPar f_somaFloat = (func_com_ptrPar) cria_func (somaValorPtrFloat, params2, 2);

		printf("teste prt float - %f\n", f_somaFloat(&f2));

	Para testar o tipo IND usamos a função:

	usamos a função:
	
		int SomaArray(int **t, int n){
		int *u = *t;
		int i;
		int soma =0;
		for(i=0 ; i<n ; i++){
			soma += *u;
			t++;
		}

	com o teste:

		int matriz[][3] = {{4,5,7},{1,2,3}};
		int *m;

		DescParam params3[2];
		params3[0].tipo_val = PTR_PAR; 
		params3[0].orig_val = IND;
		params3[0].valor.v_ptr = &m;

		params3[1].tipo_val = INT_PAR; 
		params3[1].orig_val = FIX;     
		params3[1].valor.v_int = 3;

		f_somaVet = (func_sem_Par) cria_func (SomaArray, params3, 2);
		for (i=0; i<2 ; i++ ){
			m = matriz[i];
			printf("\tsoma %dº = %d\n",i, f_somaVet());
		}




